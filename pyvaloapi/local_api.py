# This class manages requests to the local valorant game API
from .request_class import Request
from pythonping import ping
from os import path
import base64
import json

def gen_pvp_base_url(prefix="pd", region="eu"):
	return (f"https://{prefix}.{region}.a.pvp.net/")


class UnofficialAPI:
	def __init__(self, ip, port, username, password):
		self.base_url = f"https://{ip}:{port}/" # Local API base URL
		self.pvp_base_url = gen_pvp_base_url() # pvpnet API base URL
		self.auth_token = base64.b64encode(f"{username}:{password}".encode('utf-8')).decode("utf-8") # Base64 encoded token
		self.local_header = {'Authorization': f"Basic {self.auth_token}"}
		self.region = self.get_region()
		self.base_pvp_header = {"Authorization": "Bearer "+self.get_auth_info()[0], 'Content-Type': 'application/json'}
		response = self.get_session(self.get_current_player_puuid())
		self.client_version = response["clientVersion"]
		self.client_platform = base64.b64encode(json.dumps(response["clientPlatformInfo"]).encode("utf-8")).decode("utf-8")
	def handle_local_request(self, suffix):
		return Request(self.base_url+suffix, self.local_header)	
	def get_region(self):
		response = self.handle_local_request("product-session/v1/external-sessions").get_json()
		keys = list(response.keys())
		region_key = None
		for key in keys:
			if key != 'host_app':
				region_key = key

		if region_key:
			return response[region_key]["launchConfiguration"]["arguments"][4].split('=')[1]

	def get_endpoints(self):
		return self.handle_local_request("help").get_json()

	def handle_pvp_request(self, suffix, region=None, prefix=None, header=None):
		if header == None:
			header = self.base_pvp_header

		if region: 
			return Request(gen_pvp_base_url(region=region)+suffix, header)

		elif prefix:
			return Request(gen_pvp_base_url(prefix=prefix)+suffix, header)

		elif prefix and region:
			return Request(gen_pvp_base_url(prefix, region)+suffix, header)

		return Request(self.pvp_base_url+suffix, header)

	@classmethod
	def parse_lockfile(self):
		path_ = path.expandvars(r'%LOCALAPPDATA%\\Riot Games\\Riot Client\\Config\\lockfile')
		lockFileContent = None
		with open(path_, "r") as lockFile:
			lockFileContent = lockFile.read()
			
		riot_client_params = lockFileContent.split(":")
		return {"raw": lockFileContent, "name": riot_client_params[0], "pid": riot_client_params[1], "port": riot_client_params[2], "password": riot_client_params[3], "protocol": riot_client_params[4]}
	
	@classmethod
	def init_from_lockFile(self):
		lockFile = self.parse_lockfile()
		return UnofficialAPI("127.0.0.1", lockFile["port"], "riot", lockFile["password"])

	"""

	VALORANT SERVERS

	"""

	def get_valorant_server_ping(self, region):
		"""
		"{\"servers\":{\"NA West\":[\"dynamodb.us-west-1.amazonaws.com\",\"San Jose\",true],\"NA North West\":[\"dynamodb.us-west-2.amazonaws.com\",\"Portland\",true],\"NA Central\":[\"dynamodb.us-east-2.amazonaws.com\",\"Chicago\",true],\"NA East\":[\"dynamodb.us-east-1.amazonaws.com\",\"Ashburn (Virginia)\",true],\"EU Central\":[\"dynamodb.eu-central-1.amazonaws.com\",\"Frankfurt\",true],\"EU North\":[\"dynamodb.eu-north-1.amazonaws.com\",\"Stockholm\",true],\"EU West\":[\"dynamodb.eu-west-3.amazonaws.com\",\"Paris\",true],\"Asia North\":[\"dynamodb.ap-northeast-2.amazonaws.com\",\"Korea (Seoul)\",true],\"Asia West\":[\"dynamodb.ap-northeast-1.amazonaws.com\",\"Japan\",true]},\"ui\":{\"allServersView\":\"list\",\"featuredServer\":\"EU Central\",\"activeProfile\":\"Default\",\"initialised\":false,\"newServerModal\":false,\"snapshotModal\":false,\"newServerData\":{},\"newServersList\":[],\"toasty\":{},\"layout\":\"split\",\"isSmall\":false,\"doPings\":true,\"graphPeriod\":\"90s\",\"progressMessage\":null},\"pings\":{\"profiles\":[\"Default\"],\"current\":[],\"servers\":{\"NA West\":[[\"2021-10-17T12:01:35\",3431],[\"2021-10-17T12:01:41\",5000],[\"2021-10-17T12:01:43\",1565],[\"2021-10-17T12:01:46\",302],[\"2021-10-17T12:01:51\",428],[\"2021-10-17T12:01:56\",309],[\"2021-10-17T12:02:01\",492],[\"2021-10-17T12:02:06\",216],[\"2021-10-17T12:02:11\",274],[\"2021-10-17T12:02:16\",257],[\"2021-10-17T12:02:22\",720],[\"2021-10-17T12:02:27\",230],[\"2021-10-17T12:02:33\",650],[\"2021-10-17T12:02:39\",398],[\"2021-10-17T12:02:45\",234],[\"2021-10-17T12:02:51\",512],[\"2021-10-17T12:02:57\",438],[\"2021-10-17T12:03:03\",451],[\"2021-10-17T12:03:09\",404],[\"2021-10-17T12:03:32\",648],[\"2021-10-17T12:03:55\",480],[\"2021-10-17T12:04:18\",250],[\"2021-10-17T12:04:43\",1520],[\"2021-10-17T12:05:09\",1553],[\"2021-10-17T12:05:28\",314],[\"2021-10-17T12:05:49\",216],[\"2021-10-17T12:06:10\",288],[\"2021-10-17T12:06:28\",378],[\"2021-10-17T12:06:53\",226],[\"2021-10-17T12:07:18\",935],[\"2021-10-17T12:07:43\",660],[\"2021-10-17T12:07:52\",4170],[\"2021-10-17T12:07:53\",423],[\"2021-10-17T12:07:58\",313],[\"2021-10-17T12:08:04\",1242],[\"2021-10-17T12:08:11\",3270],[\"2021-10-17T12:08:13\",360],[\"2021-10-17T12:08:18\",582],[\"2021-10-17T12:08:23\",272],[\"2021-10-17T12:08:33\",737],[\"2021-10-17T12:08:45\",2023],[\"2021-10-17T12:08:48\",482],[\"2021-10-17T12:08:49\",324],[\"2021-11-26T11:53:33\",1137],[\"2021-11-26T11:53:37\",188],[\"2021-11-26T11:53:42\",182],[\"2021-11-26T11:53:47\",188],[\"2021-11-26T11:53:52\",181],[\"2021-11-26T11:53:57\",183],[\"2021-11-26T11:54:02\",186],[\"2021-11-26T11:54:07\",183],[\"2021-11-26T11:54:12\",313],[\"2021-11-26T11:54:17\",385],[\"2021-11-27T21:40:01\",1395],[\"2021-11-27T21:40:05\",373],[\"2021-11-27T21:40:10\",231],[\"2021-11-27T21:40:15\",301],[\"2021-11-30T20:58:52\",819],[\"2021-11-30T20:58:57\",182],[\"2021-11-30T20:59:04\",2269],[\"2021-11-30T20:59:07\",184],[\"2021-11-30T20:59:13\",734],[\"2021-11-30T20:59:19\",188],[\"2021-11-30T20:59:25\",184],[\"2021-11-30T20:59:31\",238],[\"2021-11-30T20:59:38\",1402],[\"2021-11-30T20:59:45\",2358],[\"2021-11-30T20:59:49\",834],[\"2021-11-30T20:59:55\",359],[\"2021-11-30T21:00:03\",249],[\"2021-11-30T21:00:22\",225],[\"2021-11-30T21:00:42\",182],[\"2021-11-30T21:01:03\",236],[\"2021-11-30T21:01:24\",214],[\"2021-11-30T21:01:44\",445],[\"2021-11-30T21:02:10\",203],[\"2021-11-30T21:02:34\",420],[\"2021-11-30T21:02:57\",183],[\"2021-11-30T21:03:23\",183],[\"2021-11-30T21:03:47\",182],[\"2021-11-30T21:04:47\",208],[\"2021-11-30T21:05:47\",182],[\"2021-11-30T21:06:07\",297],[\"2021-11-30T21:06:12\",284],[\"2021-11-30T21:06:18\",1360],[\"2021-11-30T21:06:22\",327],[\"2021-11-30T21:06:27\",242],[\"2021-12-16T19:47:41\",1143],[\"2021-12-16T19:47:45\",345],[\"2021-12-16T19:47:50\",325],[\"2021-12-16T19:47:55\",521],[\"2021-12-16T19:48:00\",427],[\"2021-12-16T19:48:05\",284],[\"2022-06-21T00:24:32\",1162],[\"2022-06-21T00:24:36\",225],[\"2022-06-21T00:24:42\",219],[\"2022-06-26T17:19:10\",3308],[\"2022-06-26T17:19:12\",432],[\"2022-06-26T17:19:17\",244],[\"2022-06-26T17:19:22\",469],[\"2022-06-26T17:19:32\",5000],[\"2022-06-26T17:19:35\",2805],[\"2022-06-26T17:19:37\",209],[\"2022-07-03T16:00:19\",933],[\"2022-07-03T16:00:23\",268],[\"2022-07-18T22:33:27\",1389],[\"2022-07-18T22:33:31\",503],[\"2022-07-18T22:33:36\",187],[\"2022-07-18T22:33:41\",198],[\"2022-07-18T22:33:46\",198],[\"2022-07-18T22:33:51\",193],[\"2022-07-18T22:33:56\",200],[\"2022-07-18T22:34:01\",197],[\"2022-07-18T22:34:06\",189],[\"2022-07-18T22:34:11\",198],[\"2022-07-18T22:34:16\",205],[\"2022-07-18T22:34:21\",196],[\"2022-07-19T13:46:30\",5000],[\"2022-07-19T13:46:35\",5000],[\"2022-07-19T13:46:40\",5000],[\"2022-07-19T13:46:45\",5000],[\"2022-07-19T15:30:37\",794],[\"2022-07-19T15:30:41\",198],[\"2022-07-19T15:30:46\",233],[\"2022-07-19T15:30:51\",207],[\"2022-07-19T15:30:56\",234],[\"2022-07-25T14:42:01\",1519],[\"2022-07-25T14:42:04\",215],[\"2022-07-25T14:42:09\",214],[\"2022-07-25T14:42:14\",218],[\"2022-09-24T22:40:28\",3889],[\"2022-09-24T22:40:33\",4202],[\"2022-09-24T22:40:37\",2745],[\"2022-09-24T22:40:41\",2020],[\"2022-09-24T22:40:46\",2090],[\"2022-09-24T22:40:52\",2436],[\"2022-09-24T22:40:57\",2028],[\"2022-09-24T22:41:03\",2225],[\"2022-09-24T22:41:09\",1721],[\"2022-09-24T22:41:14\",1174],[\"2022-09-24T22:41:20\",1259],[\"2022-09-24T22:41:25\",1324],[\"2022-09-24T22:41:33\",2268],[\"2022-09-24T22:41:38\",2437],[\"2022-09-24T22:41:43\",2068],[\"2022-09-24T22:41:47\",1402],[\"2022-09-25T11:45:40\",749],[\"2022-09-25T11:45:45\",186],[\"2022-09-25T11:45:50\",175],[\"2022-09-25T11:45:55\",180],[\"2022-09-25T11:46:00\",179],[\"2022-09-27T12:32:34\",958],[\"2022-09-27T12:32:38\",198],[\"2022-09-27T12:32:43\",198],[\"2022-09-27T12:32:49\",207],[\"2022-09-27T12:32:55\",198],[\"2022-09-27T12:33:01\",201],[\"2022-09-27T12:33:07\",197],[\"2022-09-27T12:33:13\",198],[\"2022-09-27T12:33:19\",210],[\"2022-09-27T12:33:25\",199],[\"2022-09-27T12:34:00\",204],[\"2022-09-27T12:34:35\",276],[\"2022-09-27T12:35:07\",200],[\"2022-09-27T12:35:32\",210],[\"2022-09-27T12:35:59\",228],[\"2022-09-27T12:36:23\",212],[\"2022-09-27T12:36:45\",408],[\"2022-09-27T12:36:49\",288],[\"2023-01-19T16:22:15\",670],[\"2023-01-19T16:22:20\",192],[\"2023-01-19T16:22:25\",190],[\"2023-01-19T16:22:30\",193],[\"2023-01-19T16:22:36\",188],[\"2023-01-19T16:22:42\",201],[\"2023-01-19T16:22:48\",228],[\"2023-01-19T16:22:54\",189],[\"2023-01-19T16:23:00\",191],[\"2023-01-19T16:23:27\",189],[\"2023-01-19T16:24:04\",191],[\"2023-01-19T16:24:40\",190],[\"2023-01-19T16:25:08\",189],[\"2023-01-19T16:25:39\",188],[\"2023-01-19T16:25:45\",189],[\"2023-01-19T16:25:50\",192],[\"2023-01-19T16:26:05\",202],[\"2023-01-19T16:39:13\",617],[\"2023-01-19T16:39:18\",190],[\"2023-01-19T16:39:23\",189],[\"2023-01-19T16:39:28\",194],[\"2023-01-19T16:39:33\",200],[\"2023-01-19T16:39:38\",212],[\"2023-01-19T16:39:43\",190],[\"2023-01-19T16:39:48\",192],[\"2023-01-19T16:39:53\",190],[\"2023-01-19T16:39:58\",191],[\"2023-01-19T16:40:03\",204],[\"2023-01-19T16:40:09\",192],[\"2023-01-19T16:40:14\",193]],\"NA North West\":[[\"2021-10-17T12:01:35\",3581],[\"2021-10-17T12:01:39\",2988],[\"2021-10-17T12:01:43\",1301],[\"2021-10-17T12:01:47\",399],[\"2021-10-17T12:01:51\",258],[\"2021-10-17T12:01:56\",206],[\"2021-10-17T12:02:02\",264],[\"2021-10-17T12:02:07\",477],[\"2021-10-17T12:02:12\",432],[\"2021-10-17T12:02:17\",478],[\"2021-10-17T12:02:22\",345],[\"2021-10-17T12:02:27\",252],[\"2021-10-17T12:02:33\",682],[\"2021-10-17T12:02:39\",338],[\"2021-10-17T12:02:45\",442],[\"2021-10-17T12:02:51\",449],[\"2021-10-17T12:02:57\",362],[\"2021-10-17T12:03:03\",665],[\"2021-10-17T12:03:11\",372],[\"2021-10-17T12:03:35\",415],[\"2021-10-17T12:03:57\",293],[\"2021-10-17T12:04:21\",801],[\"2021-10-17T12:04:45\",599],[\"2021-10-17T12:05:10\",423],[\"2021-10-17T12:05:31\",445],[\"2021-10-17T12:05:52\",472],[\"2021-10-17T12:06:12\",217],[\"2021-10-17T12:06:31\",219],[\"2021-10-17T12:06:56\",491],[\"2021-10-17T12:07:20\",1284],[\"2021-10-17T12:07:43\",724],[\"2021-10-17T12:07:52\",4226],[\"2021-10-17T12:07:53\",555],[\"2021-10-17T12:07:58\",334],[\"2021-10-17T12:08:04\",1373],[\"2021-10-17T12:08:11\",3308],[\"2021-10-17T12:08:13\",287],[\"2021-10-17T12:08:18\",684],[\"2021-10-17T12:08:24\",891],[\"2021-10-17T12:08:36\",1226],[\"2021-10-17T12:08:45\",2127],[\"2021-10-17T12:08:48\",407],[\"2021-10-17T12:08:50\",557],[\"2021-11-26T11:53:33\",1092],[\"2021-11-26T11:53:37\",208],[\"2021-11-26T11:53:42\",199],[\"2021-11-26T11:53:47\",204],[\"2021-11-26T11:53:52\",199],[\"2021-11-26T11:53:57\",205],[\"2021-11-26T11:54:02\",201],[\"2021-11-26T11:54:07\",199],[\"2021-11-26T11:54:12\",382],[\"2021-11-26T11:54:18\",738],[\"2021-11-27T21:40:02\",1969],[\"2021-11-27T21:40:05\",375],[\"2021-11-27T21:40:10\",221],[\"2021-11-27T21:40:15\",307],[\"2021-11-30T20:58:52\",723],[\"2021-11-30T20:58:57\",201],[\"2021-11-30T20:59:04\",2088],[\"2021-11-30T20:59:07\",200],[\"2021-11-30T20:59:13\",806],[\"2021-11-30T20:59:19\",251],[\"2021-11-30T20:59:25\",235],[\"2021-11-30T20:59:31\",273],[\"2021-11-30T20:59:38\",1287],[\"2021-11-30T20:59:43\",214],[\"2021-11-30T20:59:49\",862],[\"2021-11-30T20:59:55\",376],[\"2021-11-30T21:00:06\",252],[\"2021-11-30T21:00:24\",234],[\"2021-11-30T21:00:44\",199],[\"2021-11-30T21:01:05\",199],[\"2021-11-30T21:01:26\",415],[\"2021-11-30T21:01:47\",203],[\"2021-11-30T21:02:12\",199],[\"2021-11-30T21:02:37\",224],[\"2021-11-30T21:03:00\",387],[\"2021-11-30T21:03:25\",199],[\"2021-11-30T21:03:49\",199],[\"2021-11-30T21:04:47\",292],[\"2021-11-30T21:05:47\",243],[\"2021-11-30T21:06:07\",397],[\"2021-11-30T21:06:12\",372],[\"2021-11-30T21:06:19\",1528],[\"2021-11-30T21:06:22\",396],[\"2021-11-30T21:06:27\",375],[\"2021-12-16T19:47:41\",1037],[\"2021-12-16T19:47:45\",379],[\"2021-12-16T19:47:50\",443],[\"2021-12-16T19:47:55\",579],[\"2021-12-16T19:48:00\",484],[\"2021-12-16T19:48:05\",329],[\"2022-06-21T00:24:33\",1053],[\"2022-06-21T00:24:37\",238],[\"2022-06-21T00:24:42\",256],[\"2022-06-26T17:19:11\",3582],[\"2022-06-26T17:19:12\",730],[\"2022-06-26T17:19:17\",341],[\"2022-06-26T17:19:22\",254],[\"2022-06-26T17:19:32\",5000],[\"2022-06-26T17:19:35\",2721],[\"2022-06-26T17:19:38\",299],[\"2022-07-03T16:00:19\",886],[\"2022-07-03T16:00:24\",261],[\"2022-07-18T22:33:27\",871],[\"2022-07-18T22:33:32\",312],[\"2022-07-18T22:33:37\",263],[\"2022-07-18T22:33:42\",301],[\"2022-07-18T22:33:47\",290],[\"2022-07-18T22:33:52\",306],[\"2022-07-18T22:33:57\",282],[\"2022-07-18T22:34:02\",219],[\"2022-07-18T22:34:07\",299],[\"2022-07-18T22:34:12\",213],[\"2022-07-18T22:34:17\",217],[\"2022-07-18T22:34:22\",209],[\"2022-07-19T13:46:30\",5000],[\"2022-07-19T13:46:35\",5000],[\"2022-07-19T13:46:40\",5000],[\"2022-07-19T13:46:46\",5000],[\"2022-07-19T15:30:37\",774],[\"2022-07-19T15:30:42\",254],[\"2022-07-19T15:30:47\",284],[\"2022-07-19T15:30:52\",225],[\"2022-07-19T15:30:57\",232],[\"2022-07-25T14:42:01\",1070],[\"2022-07-25T14:42:05\",200],[\"2022-07-25T14:42:10\",199],[\"2022-07-25T14:42:15\",198],[\"2022-09-24T22:40:29\",5000],[\"2022-09-24T22:40:34\",5000],[\"2022-09-24T22:40:37\",2611],[\"2022-09-24T22:40:40\",690],[\"2022-09-24T22:40:45\",779],[\"2022-09-24T22:40:51\",980],[\"2022-09-24T22:40:56\",749],[\"2022-09-24T22:41:02\",717],[\"2022-09-24T22:41:08\",914],[\"2022-09-24T22:41:14\",1206],[\"2022-09-24T22:41:20\",1326],[\"2022-09-24T22:41:26\",2074],[\"2022-09-24T22:41:31\",792],[\"2022-09-24T22:41:36\",866],[\"2022-09-24T22:41:42\",1866],[\"2022-09-24T22:41:47\",1422],[\"2022-09-25T11:45:40\",638],[\"2022-09-25T11:45:45\",196],[\"2022-09-25T11:45:50\",191],[\"2022-09-25T11:45:55\",203],[\"2022-09-25T11:46:00\",193],[\"2022-09-27T12:32:34\",673],[\"2022-09-27T12:32:39\",195],[\"2022-09-27T12:32:44\",193],[\"2022-09-27T12:32:49\",234],[\"2022-09-27T12:32:55\",221],[\"2022-09-27T12:33:01\",229],[\"2022-09-27T12:33:07\",223],[\"2022-09-27T12:33:13\",224],[\"2022-09-27T12:33:19\",240],[\"2022-09-27T12:33:26\",195],[\"2022-09-27T12:34:04\",194],[\"2022-09-27T12:34:39\",929],[\"2022-09-27T12:35:10\",194],[\"2022-09-27T12:35:34\",196],[\"2022-09-27T12:36:01\",225],[\"2022-09-27T12:36:25\",373],[\"2022-09-27T12:36:45\",830],[\"2022-09-27T12:36:50\",357],[\"2023-01-19T16:22:16\",676],[\"2023-01-19T16:22:20\",189],[\"2023-01-19T16:22:25\",213],[\"2023-01-19T16:22:31\",268],[\"2023-01-19T16:22:37\",451],[\"2023-01-19T16:22:43\",241],[\"2023-01-19T16:22:49\",313],[\"2023-01-19T16:22:55\",308],[\"2023-01-19T16:23:01\",190],[\"2023-01-19T16:23:30\",189],[\"2023-01-19T16:24:08\",189],[\"2023-01-19T16:24:43\",194],[\"2023-01-19T16:25:11\",194],[\"2023-01-19T16:25:42\",190],[\"2023-01-19T16:25:47\",196],[\"2023-01-19T16:39:14\",609],[\"2023-01-19T16:39:19\",186],[\"2023-01-19T16:39:24\",185],[\"2023-01-19T16:39:29\",185],[\"2023-01-19T16:39:34\",209],[\"2023-01-19T16:39:39\",198],[\"2023-01-19T16:39:44\",187],[\"2023-01-19T16:39:49\",187],[\"2023-01-19T16:39:54\",188],[\"2023-01-19T16:39:59\",191],[\"2023-01-19T16:40:04\",195],[\"2023-01-19T16:40:09\",186],[\"2023-01-19T16:40:14\",187]],\"NA Central\":[[\"2021-10-17T12:01:36\",5000],[\"2021-10-17T12:01:41\",4415],[\"2021-10-17T12:01:43\",1008],[\"2021-10-17T12:01:47\",190],[\"2021-10-17T12:01:52\",250],[\"2021-10-17T12:01:57\",322],[\"2021-10-17T12:02:02\",272],[\"2021-10-17T12:02:07\",342],[\"2021-10-17T12:02:12\",404],[\"2021-10-17T12:02:17\",278],[\"2021-10-17T12:02:22\",295],[\"2021-10-17T12:02:28\",477],[\"2021-10-17T12:02:34\",317],[\"2021-10-17T12:02:40\",366],[\"2021-10-17T12:02:46\",261],[\"2021-10-17T12:02:52\",441],[\"2021-10-17T12:02:58\",324],[\"2021-10-17T12:03:04\",556],[\"2021-10-17T12:03:14\",139],[\"2021-10-17T12:03:37\",279],[\"2021-10-17T12:04:00\",171],[\"2021-10-17T12:04:23\",376],[\"2021-10-17T12:04:48\",180],[\"2021-10-17T12:05:13\",709],[\"2021-10-17T12:05:33\",268],[\"2021-10-17T12:05:54\",208],[\"2021-10-17T12:06:14\",351],[\"2021-10-17T12:06:34\",1164],[\"2021-10-17T12:07:00\",1572],[\"2021-10-17T12:07:22\",163],[\"2021-10-17T12:07:43\",471],[\"2021-10-17T12:07:52\",4086],[\"2021-10-17T12:07:53\",419],[\"2021-10-17T12:07:58\",453],[\"2021-10-17T12:08:03\",1070],[\"2021-10-17T12:08:11\",3525],[\"2021-10-17T12:08:13\",482],[\"2021-10-17T12:08:18\",447],[\"2021-10-17T12:08:24\",814],[\"2021-10-17T12:08:39\",290],[\"2021-10-17T12:08:45\",1476],[\"2021-10-17T12:08:50\",244],[\"2021-11-26T11:53:34\",1804],[\"2021-11-26T11:53:37\",322],[\"2021-11-26T11:53:42\",312],[\"2021-11-26T11:53:47\",307],[\"2021-11-26T11:53:52\",314],[\"2021-11-26T11:53:57\",311],[\"2021-11-26T11:54:03\",311],[\"2021-11-26T11:54:08\",466],[\"2021-11-26T11:54:13\",456],[\"2021-11-26T11:54:18\",894],[\"2021-11-27T21:40:02\",1692],[\"2021-11-27T21:40:06\",231],[\"2021-11-27T21:40:11\",150],[\"2021-11-27T21:40:16\",158],[\"2021-11-30T20:58:54\",1358],[\"2021-11-30T20:58:57\",161],[\"2021-11-30T20:59:04\",1803],[\"2021-11-30T20:59:07\",143],[\"2021-11-30T20:59:13\",735],[\"2021-11-30T20:59:19\",171],[\"2021-11-30T20:59:25\",179],[\"2021-11-30T20:59:31\",142],[\"2021-11-30T20:59:38\",1301],[\"2021-11-30T20:59:43\",144],[\"2021-11-30T20:59:50\",880],[\"2021-11-30T20:59:55\",278],[\"2021-11-30T21:00:08\",171],[\"2021-11-30T21:00:27\",209],[\"2021-11-30T21:00:47\",140],[\"2021-11-30T21:01:08\",505],[\"2021-11-30T21:01:28\",140],[\"2021-11-30T21:01:49\",139],[\"2021-11-30T21:02:15\",140],[\"2021-11-30T21:02:39\",140],[\"2021-11-30T21:03:03\",141],[\"2021-11-30T21:03:28\",141],[\"2021-11-30T21:03:52\",140],[\"2021-11-30T21:04:47\",203],[\"2021-11-30T21:05:47\",174],[\"2021-11-30T21:06:07\",173],[\"2021-11-30T21:06:12\",213],[\"2021-11-30T21:06:18\",1431],[\"2021-11-30T21:06:22\",233],[\"2021-11-30T21:06:27\",234],[\"2021-12-16T19:47:41\",1014],[\"2021-12-16T19:47:45\",315],[\"2021-12-16T19:47:51\",778],[\"2021-12-16T19:47:56\",554],[\"2021-12-16T19:48:01\",383],[\"2021-12-16T19:48:06\",334],[\"2022-06-21T00:24:34\",1161],[\"2022-06-21T00:24:38\",237],[\"2022-06-21T00:24:43\",208],[\"2022-06-26T17:19:10\",2549],[\"2022-06-26T17:19:12\",495],[\"2022-06-26T17:19:18\",612],[\"2022-06-26T17:19:22\",216],[\"2022-06-26T17:19:32\",5000],[\"2022-06-26T17:19:35\",2589],[\"2022-06-26T17:19:37\",203],[\"2022-07-03T16:00:20\",1295],[\"2022-07-03T16:00:24\",218],[\"2022-07-18T22:33:27\",625],[\"2022-07-18T22:33:32\",153],[\"2022-07-18T22:33:37\",150],[\"2022-07-18T22:33:42\",156],[\"2022-07-18T22:33:47\",150],[\"2022-07-18T22:33:52\",152],[\"2022-07-18T22:33:57\",153],[\"2022-07-18T22:34:02\",269],[\"2022-07-18T22:34:07\",146],[\"2022-07-18T22:34:12\",217],[\"2022-07-18T22:34:18\",207],[\"2022-07-18T22:34:23\",196],[\"2022-07-19T13:46:30\",5000],[\"2022-07-19T13:46:36\",5000],[\"2022-07-19T13:46:41\",5000],[\"2022-07-19T13:46:46\",5000],[\"2022-07-19T15:30:37\",530],[\"2022-07-19T15:30:42\",180],[\"2022-07-19T15:30:47\",207],[\"2022-07-19T15:30:52\",173],[\"2022-07-19T15:30:57\",162],[\"2022-07-25T14:42:01\",1349],[\"2022-07-25T14:42:05\",156],[\"2022-07-25T14:42:10\",155],[\"2022-07-25T14:42:15\",177],[\"2022-09-24T22:40:29\",5000],[\"2022-09-24T22:40:34\",5000],[\"2022-09-24T22:40:37\",2390],[\"2022-09-24T22:40:42\",1992],[\"2022-09-24T22:40:47\",2227],[\"2022-09-24T22:40:51\",909],[\"2022-09-24T22:40:58\",2160],[\"2022-09-24T22:41:03\",1616],[\"2022-09-24T22:41:09\",1330],[\"2022-09-24T22:41:15\",1289],[\"2022-09-24T22:41:20\",1197],[\"2022-09-24T22:41:28\",3418],[\"2022-09-24T22:41:33\",2171],[\"2022-09-24T22:41:38\",2430],[\"2022-09-24T22:41:44\",3024],[\"2022-09-24T22:41:47\",1268],[\"2022-09-25T11:45:41\",612],[\"2022-09-25T11:45:45\",165],[\"2022-09-25T11:45:50\",141],[\"2022-09-25T11:45:55\",145],[\"2022-09-25T11:46:00\",144],[\"2022-09-27T12:32:34\",553],[\"2022-09-27T12:32:39\",189],[\"2022-09-27T12:32:44\",189],[\"2022-09-27T12:32:50\",169],[\"2022-09-27T12:32:56\",156],[\"2022-09-27T12:33:02\",169],[\"2022-09-27T12:33:08\",174],[\"2022-09-27T12:33:14\",173],[\"2022-09-27T12:33:20\",215],[\"2022-09-27T12:33:30\",162],[\"2022-09-27T12:34:08\",144],[\"2022-09-27T12:34:42\",157],[\"2022-09-27T12:35:13\",145],[\"2022-09-27T12:35:40\",486],[\"2022-09-27T12:36:04\",166],[\"2022-09-27T12:36:28\",326],[\"2022-09-27T12:36:45\",855],[\"2022-09-27T12:36:49\",192],[\"2023-01-19T16:22:16\",498],[\"2023-01-19T16:22:20\",178],[\"2023-01-19T16:22:25\",309],[\"2023-01-19T16:22:31\",151],[\"2023-01-19T16:22:37\",150],[\"2023-01-19T16:22:43\",153],[\"2023-01-19T16:22:49\",152],[\"2023-01-19T16:22:55\",150],[\"2023-01-19T16:23:01\",197],[\"2023-01-19T16:23:33\",156],[\"2023-01-19T16:24:12\",152],[\"2023-01-19T16:24:46\",152],[\"2023-01-19T16:25:13\",151],[\"2023-01-19T16:25:42\",238],[\"2023-01-19T16:25:47\",269],[\"2023-01-19T16:39:14\",467],[\"2023-01-19T16:39:19\",172],[\"2023-01-19T16:39:24\",179],[\"2023-01-19T16:39:29\",188],[\"2023-01-19T16:39:34\",274],[\"2023-01-19T16:39:39\",234],[\"2023-01-19T16:39:44\",223],[\"2023-01-19T16:39:49\",211],[\"2023-01-19T16:39:54\",216],[\"2023-01-19T16:39:59\",220],[\"2023-01-19T16:40:04\",207],[\"2023-01-19T16:40:09\",185],[\"2023-01-19T16:40:14\",181]],\"NA East\":[[\"2021-10-17T12:01:34\",2283],[\"2021-10-17T12:01:40\",2644],[\"2021-10-17T12:01:43\",621],[\"2021-10-17T12:01:47\",277],[\"2021-10-17T12:01:52\",325],[\"2021-10-17T12:01:57\",295],[\"2021-10-17T12:02:02\",323],[\"2021-10-17T12:02:08\",457],[\"2021-10-17T12:02:12\",345],[\"2021-10-17T12:02:17\",229],[\"2021-10-17T12:02:22\",168],[\"2021-10-17T12:02:28\",415],[\"2021-10-17T12:02:34\",252],[\"2021-10-17T12:02:40\",383],[\"2021-10-17T12:02:46\",282],[\"2021-10-17T12:02:52\",375],[\"2021-10-17T12:02:58\",352],[\"2021-10-17T12:03:06\",1938],[\"2021-10-17T12:03:18\",194],[\"2021-10-17T12:03:40\",464],[\"2021-10-17T12:04:02\",160],[\"2021-10-17T12:04:26\",296],[\"2021-10-17T12:04:51\",300],[\"2021-10-17T12:05:15\",237],[\"2021-10-17T12:05:35\",474],[\"2021-10-17T12:05:56\",210],[\"2021-10-17T12:06:15\",213],[\"2021-10-17T12:06:35\",150],[\"2021-10-17T12:07:02\",1096],[\"2021-10-17T12:07:35\",317],[\"2021-10-17T12:07:43\",630],[\"2021-10-17T12:07:52\",4027],[\"2021-10-17T12:07:53\",282],[\"2021-10-17T12:07:57\",186],[\"2021-10-17T12:08:03\",1090],[\"2021-10-17T12:08:11\",3315],[\"2021-10-17T12:08:13\",335],[\"2021-10-17T12:08:18\",558],[\"2021-10-17T12:08:24\",744],[\"2021-10-17T12:08:44\",1972],[\"2021-10-17T12:08:48\",448],[\"2021-11-26T11:53:33\",464],[\"2021-11-26T11:53:38\",134],[\"2021-11-26T11:53:43\",132],[\"2021-11-26T11:53:48\",131],[\"2021-11-26T11:53:53\",137],[\"2021-11-26T11:53:58\",133],[\"2021-11-26T11:54:03\",136],[\"2021-11-26T11:54:08\",264],[\"2021-11-26T11:54:13\",311],[\"2021-11-26T11:54:18\",312],[\"2021-11-27T21:40:02\",1089],[\"2021-11-27T21:40:06\",174],[\"2021-11-27T21:40:11\",141],[\"2021-11-27T21:40:16\",142],[\"2021-11-30T20:58:54\",1662],[\"2021-11-30T20:58:58\",143],[\"2021-11-30T20:59:04\",1487],[\"2021-11-30T20:59:08\",137],[\"2021-11-30T20:59:14\",163],[\"2021-11-30T20:59:20\",449],[\"2021-11-30T20:59:28\",2013],[\"2021-11-30T20:59:32\",202],[\"2021-11-30T20:59:38\",635],[\"2021-11-30T20:59:44\",808],[\"2021-11-30T20:59:50\",336],[\"2021-11-30T20:59:56\",249],[\"2021-11-30T21:00:10\",213],[\"2021-11-30T21:00:29\",138],[\"2021-11-30T21:00:49\",136],[\"2021-11-30T21:01:10\",144],[\"2021-11-30T21:01:31\",296],[\"2021-11-30T21:01:52\",137],[\"2021-11-30T21:02:17\",138],[\"2021-11-30T21:02:41\",140],[\"2021-11-30T21:03:05\",217],[\"2021-11-30T21:03:31\",135],[\"2021-11-30T21:03:54\",136],[\"2021-11-30T21:04:47\",315],[\"2021-11-30T21:05:47\",269],[\"2021-11-30T21:06:07\",321],[\"2021-11-30T21:06:12\",261],[\"2021-11-30T21:06:18\",1368],[\"2021-11-30T21:06:22\",305],[\"2021-11-30T21:06:27\",274],[\"2021-12-16T19:47:42\",972],[\"2021-12-16T19:47:46\",396],[\"2021-12-16T19:47:51\",337],[\"2021-12-16T19:47:56\",469],[\"2021-12-16T19:48:01\",222],[\"2021-12-16T19:48:06\",332],[\"2022-06-21T00:24:33\",775],[\"2022-06-21T00:24:38\",263],[\"2022-06-21T00:24:43\",233],[\"2022-06-26T17:19:11\",3535],[\"2022-06-26T17:19:13\",476],[\"2022-06-26T17:19:18\",286],[\"2022-06-26T17:19:23\",291],[\"2022-06-26T17:19:33\",5000],[\"2022-06-26T17:19:35\",1816],[\"2022-07-03T16:00:20\",976],[\"2022-07-03T16:00:24\",235],[\"2022-07-18T22:33:27\",504],[\"2022-07-18T22:33:32\",187],[\"2022-07-18T22:33:37\",235],[\"2022-07-18T22:33:42\",278],[\"2022-07-18T22:33:47\",246],[\"2022-07-18T22:33:52\",302],[\"2022-07-18T22:33:57\",267],[\"2022-07-18T22:34:03\",324],[\"2022-07-18T22:34:07\",250],[\"2022-07-18T22:34:13\",253],[\"2022-07-18T22:34:18\",250],[\"2022-07-18T22:34:23\",224],[\"2022-07-19T13:46:31\",5000],[\"2022-07-19T13:46:36\",5000],[\"2022-07-19T13:46:41\",5000],[\"2022-07-19T15:30:38\",484],[\"2022-07-19T15:30:42\",179],[\"2022-07-19T15:30:47\",197],[\"2022-07-19T15:30:52\",183],[\"2022-07-19T15:30:57\",157],[\"2022-07-25T14:42:02\",1850],[\"2022-07-25T14:42:05\",169],[\"2022-07-25T14:42:11\",508],[\"2022-07-25T14:42:15\",167],[\"2022-09-24T22:40:30\",5000],[\"2022-09-24T22:40:35\",5000],[\"2022-09-24T22:40:37\",2115],[\"2022-09-24T22:40:42\",2012],[\"2022-09-24T22:40:47\",2323],[\"2022-09-24T22:40:53\",2341],[\"2022-09-24T22:40:59\",2132],[\"2022-09-24T22:41:04\",1016],[\"2022-09-24T22:41:10\",1098],[\"2022-09-24T22:41:16\",1164],[\"2022-09-24T22:41:23\",2241],[\"2022-09-24T22:41:29\",2154],[\"2022-09-24T22:41:34\",2230],[\"2022-09-24T22:41:39\",1738],[\"2022-09-24T22:41:43\",1158],[\"2022-09-24T22:41:48\",1170],[\"2022-09-25T11:45:43\",2234],[\"2022-09-25T11:45:46\",145],[\"2022-09-25T11:45:51\",123],[\"2022-09-25T11:45:56\",126],[\"2022-09-25T11:46:01\",123],[\"2022-09-27T12:32:34\",457],[\"2022-09-27T12:32:39\",140],[\"2022-09-27T12:32:44\",142],[\"2022-09-27T12:32:50\",196],[\"2022-09-27T12:32:56\",183],[\"2022-09-27T12:33:02\",209],[\"2022-09-27T12:33:08\",208],[\"2022-09-27T12:33:14\",204],[\"2022-09-27T12:33:20\",250],[\"2022-09-27T12:33:34\",143],[\"2022-09-27T12:34:12\",151],[\"2022-09-27T12:34:46\",140],[\"2022-09-27T12:35:16\",139],[\"2022-09-27T12:35:42\",282],[\"2022-09-27T12:36:06\",301],[\"2022-09-27T12:36:31\",180],[\"2022-09-27T12:36:44\",181],[\"2022-09-27T12:36:50\",399],[\"2023-01-19T16:22:16\",493],[\"2023-01-19T16:22:20\",129],[\"2023-01-19T16:22:26\",138],[\"2023-01-19T16:22:31\",253],[\"2023-01-19T16:22:37\",187],[\"2023-01-19T16:22:43\",252],[\"2023-01-19T16:22:49\",341],[\"2023-01-19T16:22:55\",193],[\"2023-01-19T16:23:01\",220],[\"2023-01-19T16:23:39\",144],[\"2023-01-19T16:24:16\",144],[\"2023-01-19T16:24:50\",154],[\"2023-01-19T16:25:17\",162],[\"2023-01-19T16:25:42\",381],[\"2023-01-19T16:25:47\",279],[\"2023-01-19T16:39:14\",454],[\"2023-01-19T16:39:19\",139],[\"2023-01-19T16:39:24\",139],[\"2023-01-19T16:39:29\",138],[\"2023-01-19T16:39:34\",153],[\"2023-01-19T16:39:39\",139],[\"2023-01-19T16:39:44\",140],[\"2023-01-19T16:39:49\",141],[\"2023-01-19T16:39:54\",139],[\"2023-01-19T16:39:59\",139],[\"2023-01-19T16:40:04\",144],[\"2023-01-19T16:40:09\",139],[\"2023-01-19T16:40:15\",138]],\"EU Central\":[[\"2021-10-17T12:01:35\",2233],[\"2021-10-17T12:01:40\",2376],[\"2021-10-17T12:01:42\",90],[\"2021-10-17T12:01:47\",74],[\"2021-10-17T12:01:52\",85],[\"2021-10-17T12:01:57\",78],[\"2021-10-17T12:02:03\",80],[\"2021-10-17T12:02:08\",75],[\"2021-10-17T12:02:13\",88],[\"2021-10-17T12:02:18\",74],[\"2021-10-17T12:02:23\",100],[\"2021-10-17T12:02:29\",144],[\"2021-10-17T12:02:35\",101],[\"2021-10-17T12:02:41\",84],[\"2021-10-17T12:02:47\",108],[\"2021-10-17T12:02:53\",72],[\"2021-10-17T12:02:59\",72],[\"2021-10-17T12:03:05\",99],[\"2021-10-17T12:03:20\",99],[\"2021-10-17T12:03:42\",85],[\"2021-10-17T12:04:05\",77],[\"2021-10-17T12:04:28\",73],[\"2021-10-17T12:04:53\",90],[\"2021-10-17T12:05:17\",72],[\"2021-10-17T12:05:37\",72],[\"2021-10-17T12:05:58\",72],[\"2021-10-17T12:06:17\",74],[\"2021-10-17T12:06:39\",74],[\"2021-10-17T12:07:04\",115],[\"2021-10-17T12:07:35\",77],[\"2021-10-17T12:07:42\",95],[\"2021-10-17T12:07:47\",96],[\"2021-10-17T12:07:52\",72],[\"2021-10-17T12:07:57\",71],[\"2021-10-17T12:08:02\",71],[\"2021-10-17T12:08:07\",76],[\"2021-10-17T12:08:12\",73],[\"2021-10-17T12:08:18\",96],[\"2021-10-17T12:08:24\",905],[\"2021-10-17T12:08:42\",172],[\"2021-10-17T12:08:47\",90],[\"2021-11-26T11:53:33\",351],[\"2021-11-26T11:53:38\",72],[\"2021-11-26T11:53:43\",73],[\"2021-11-26T11:53:48\",70],[\"2021-11-26T11:53:53\",73],[\"2021-11-26T11:53:58\",75],[\"2021-11-26T11:54:03\",71],[\"2021-11-26T11:54:09\",551],[\"2021-11-26T11:54:13\",250],[\"2021-11-26T11:54:18\",315],[\"2021-11-27T21:40:02\",1000],[\"2021-11-27T21:40:06\",102],[\"2021-11-27T21:40:11\",80],[\"2021-11-27T21:40:16\",91],[\"2021-11-30T20:58:54\",1216],[\"2021-11-30T20:58:58\",79],[\"2021-11-30T20:59:04\",1173],[\"2021-11-30T20:59:08\",104],[\"2021-11-30T20:59:14\",71],[\"2021-11-30T20:59:20\",369],[\"2021-11-30T20:59:28\",2041],[\"2021-11-30T20:59:32\",76],[\"2021-11-30T20:59:38\",537],[\"2021-11-30T20:59:44\",542],[\"2021-11-30T20:59:50\",231],[\"2021-11-30T20:59:56\",130],[\"2021-11-30T21:00:12\",112],[\"2021-11-30T21:00:31\",119],[\"2021-11-30T21:00:52\",70],[\"2021-11-30T21:01:12\",549],[\"2021-11-30T21:01:32\",102],[\"2021-11-30T21:01:55\",70],[\"2021-11-30T21:02:20\",138],[\"2021-11-30T21:02:43\",69],[\"2021-11-30T21:03:07\",70],[\"2021-11-30T21:03:34\",922],[\"2021-11-30T21:03:57\",72],[\"2021-11-30T21:04:47\",250],[\"2021-11-30T21:05:47\",215],[\"2021-11-30T21:06:07\",86],[\"2021-11-30T21:06:12\",113],[\"2021-11-30T21:06:18\",1218],[\"2021-11-30T21:06:22\",107],[\"2021-11-30T21:06:27\",92],[\"2021-12-16T19:47:42\",887],[\"2021-12-16T19:47:46\",332],[\"2021-12-16T19:47:51\",182],[\"2021-12-16T19:47:57\",477],[\"2021-12-16T19:48:01\",211],[\"2021-12-16T19:48:06\",264],[\"2022-06-21T00:24:33\",675],[\"2022-06-21T00:24:38\",119],[\"2022-06-21T00:24:43\",104],[\"2022-06-26T17:19:11\",2619],[\"2022-06-26T17:19:14\",873],[\"2022-06-26T17:19:18\",207],[\"2022-06-26T17:19:23\",119],[\"2022-06-26T17:19:33\",5000],[\"2022-06-26T17:19:35\",1636],[\"2022-07-03T16:00:20\",666],[\"2022-07-03T16:00:25\",169],[\"2022-07-18T22:33:27\",601],[\"2022-07-18T22:33:32\",110],[\"2022-07-18T22:33:37\",107],[\"2022-07-18T22:33:42\",119],[\"2022-07-18T22:33:48\",107],[\"2022-07-18T22:33:53\",95],[\"2022-07-18T22:33:58\",114],[\"2022-07-18T22:34:03\",116],[\"2022-07-18T22:34:08\",77],[\"2022-07-18T22:34:13\",80],[\"2022-07-18T22:34:18\",81],[\"2022-07-18T22:34:23\",99],[\"2022-07-19T13:46:31\",5000],[\"2022-07-19T13:46:36\",5000],[\"2022-07-19T13:46:41\",5000],[\"2022-07-19T15:30:38\",364],[\"2022-07-19T15:30:42\",99],[\"2022-07-19T15:30:48\",127],[\"2022-07-19T15:30:53\",123],[\"2022-07-19T15:30:58\",106],[\"2022-07-25T14:42:01\",454],[\"2022-07-25T14:42:06\",322],[\"2022-07-25T14:42:11\",99],[\"2022-07-25T14:42:16\",99],[\"2022-09-24T22:40:30\",5000],[\"2022-09-24T22:40:35\",4388],[\"2022-09-24T22:40:36\",918],[\"2022-09-24T22:40:42\",2014],[\"2022-09-24T22:40:48\",2420],[\"2022-09-24T22:40:53\",2419],[\"2022-09-24T22:40:59\",1729],[\"2022-09-24T22:41:05\",2448],[\"2022-09-24T22:41:10\",1498],[\"2022-09-24T22:41:16\",1071],[\"2022-09-24T22:41:23\",2266],[\"2022-09-24T22:41:29\",2220],[\"2022-09-24T22:41:34\",2260],[\"2022-09-24T22:41:39\",1780],[\"2022-09-24T22:41:43\",994],[\"2022-09-24T22:41:48\",1152],[\"2022-09-25T11:45:41\",494],[\"2022-09-25T11:45:46\",64],[\"2022-09-25T11:45:51\",62],[\"2022-09-25T11:45:56\",66],[\"2022-09-25T11:46:01\",61],[\"2022-09-27T12:32:35\",251],[\"2022-09-27T12:32:40\",126],[\"2022-09-27T12:32:45\",62],[\"2022-09-27T12:32:50\",60],[\"2022-09-27T12:32:56\",61],[\"2022-09-27T12:33:02\",61],[\"2022-09-27T12:33:08\",62],[\"2022-09-27T12:33:14\",63],[\"2022-09-27T12:33:20\",62],[\"2022-09-27T12:33:39\",63],[\"2022-09-27T12:34:18\",60],[\"2022-09-27T12:34:51\",63],[\"2022-09-27T12:35:18\",60],[\"2022-09-27T12:35:44\",63],[\"2022-09-27T12:36:09\",125],[\"2022-09-27T12:36:34\",123],[\"2022-09-27T12:36:44\",67],[\"2022-09-27T12:36:49\",63],[\"2023-01-19T16:22:16\",231],[\"2023-01-19T16:22:21\",58],[\"2023-01-19T16:22:26\",57],[\"2023-01-19T16:22:32\",76],[\"2023-01-19T16:22:38\",555],[\"2023-01-19T16:22:44\",99],[\"2023-01-19T16:22:50\",71],[\"2023-01-19T16:22:56\",62],[\"2023-01-19T16:23:05\",56],[\"2023-01-19T16:23:42\",55],[\"2023-01-19T16:24:20\",54],[\"2023-01-19T16:24:54\",56],[\"2023-01-19T16:25:20\",57],[\"2023-01-19T16:25:42\",117],[\"2023-01-19T16:25:47\",141],[\"2023-01-19T16:39:14\",205],[\"2023-01-19T16:39:19\",54],[\"2023-01-19T16:39:24\",55],[\"2023-01-19T16:39:29\",55],[\"2023-01-19T16:39:34\",77],[\"2023-01-19T16:39:39\",54],[\"2023-01-19T16:39:44\",56],[\"2023-01-19T16:39:50\",62],[\"2023-01-19T16:39:55\",56],[\"2023-01-19T16:40:00\",62],[\"2023-01-19T16:40:05\",90],[\"2023-01-19T16:40:10\",61],[\"2023-01-19T16:40:15\",55]],\"EU North\":[[\"2021-10-17T12:01:37\",3495],[\"2021-10-17T12:01:40\",1879],[\"2021-10-17T12:01:43\",365],[\"2021-10-17T12:01:48\",174],[\"2021-10-17T12:01:53\",281],[\"2021-10-17T12:01:58\",260],[\"2021-10-17T12:02:03\",327],[\"2021-10-17T12:02:08\",168],[\"2021-10-17T12:02:13\",106],[\"2021-10-17T12:02:18\",444],[\"2021-10-17T12:02:24\",345],[\"2021-10-17T12:02:31\",760],[\"2021-10-17T12:02:36\",163],[\"2021-10-17T12:02:42\",108],[\"2021-10-17T12:02:48\",386],[\"2021-10-17T12:02:54\",502],[\"2021-10-17T12:03:00\",301],[\"2021-10-17T12:03:08\",2209],[\"2021-10-17T12:03:22\",244],[\"2021-10-17T12:03:44\",208],[\"2021-10-17T12:04:08\",233],[\"2021-10-17T12:04:31\",504],[\"2021-10-17T12:04:57\",145],[\"2021-10-17T12:05:19\",205],[\"2021-10-17T12:05:40\",270],[\"2021-10-17T12:06:01\",324],[\"2021-10-17T12:06:19\",153],[\"2021-10-17T12:06:41\",451],[\"2021-10-17T12:07:07\",415],[\"2021-10-17T12:07:35\",306],[\"2021-10-17T12:07:43\",703],[\"2021-10-17T12:07:52\",4161],[\"2021-10-17T12:07:53\",370],[\"2021-10-17T12:07:59\",1301],[\"2021-10-17T12:08:04\",1286],[\"2021-10-17T12:08:11\",3476],[\"2021-10-17T12:08:13\",432],[\"2021-10-17T12:08:18\",626],[\"2021-10-17T12:08:25\",1706],[\"2021-10-17T12:08:44\",1818],[\"2021-10-17T12:08:48\",414],[\"2021-11-26T11:53:34\",378],[\"2021-11-26T11:53:38\",95],[\"2021-11-26T11:53:43\",93],[\"2021-11-26T11:53:48\",96],[\"2021-11-26T11:53:53\",109],[\"2021-11-26T11:53:58\",93],[\"2021-11-26T11:54:03\",91],[\"2021-11-26T11:54:09\",317],[\"2021-11-26T11:54:14\",202],[\"2021-11-26T11:54:19\",336],[\"2021-11-27T21:40:03\",786],[\"2021-11-27T21:40:07\",98],[\"2021-11-27T21:40:12\",90],[\"2021-11-27T21:40:17\",91],[\"2021-11-30T20:58:54\",895],[\"2021-11-30T20:58:58\",86],[\"2021-11-30T20:59:04\",844],[\"2021-11-30T20:59:08\",87],[\"2021-11-30T20:59:14\",87],[\"2021-11-30T20:59:20\",438],[\"2021-11-30T20:59:28\",2070],[\"2021-11-30T20:59:32\",112],[\"2021-11-30T20:59:38\",555],[\"2021-11-30T20:59:44\",617],[\"2021-11-30T20:59:50\",247],[\"2021-11-30T20:59:56\",151],[\"2021-11-30T21:00:14\",96],[\"2021-11-30T21:00:33\",97],[\"2021-11-30T21:00:54\",87],[\"2021-11-30T21:01:15\",86],[\"2021-11-30T21:01:34\",86],[\"2021-11-30T21:01:58\",1134],[\"2021-11-30T21:02:23\",91],[\"2021-11-30T21:02:46\",86],[\"2021-11-30T21:03:11\",93],[\"2021-11-30T21:03:36\",94],[\"2021-11-30T21:04:02\",756],[\"2021-11-30T21:04:47\",370],[\"2021-11-30T21:05:47\",261],[\"2021-11-30T21:06:07\",236],[\"2021-11-30T21:06:12\",282],[\"2021-11-30T21:06:19\",1451],[\"2021-11-30T21:06:22\",324],[\"2021-11-30T21:06:27\",333],[\"2021-12-16T19:47:42\",998],[\"2021-12-16T19:47:47\",742],[\"2021-12-16T19:47:52\",240],[\"2021-12-16T19:47:57\",755],[\"2021-12-16T19:48:02\",295],[\"2021-12-16T19:48:07\",667],[\"2022-06-21T00:24:34\",901],[\"2022-06-21T00:24:39\",193],[\"2022-06-21T00:24:44\",219],[\"2022-06-26T17:19:10\",1913],[\"2022-06-26T17:19:13\",127],[\"2022-06-26T17:19:19\",959],[\"2022-06-26T17:19:24\",851],[\"2022-06-26T17:19:34\",5000],[\"2022-06-26T17:19:35\",865],[\"2022-07-03T16:00:20\",669],[\"2022-07-03T16:00:25\",160],[\"2022-07-18T22:33:27\",423],[\"2022-07-18T22:33:33\",198],[\"2022-07-18T22:33:38\",131],[\"2022-07-18T22:33:43\",163],[\"2022-07-18T22:33:48\",153],[\"2022-07-18T22:33:53\",231],[\"2022-07-18T22:33:58\",262],[\"2022-07-18T22:34:03\",240],[\"2022-07-18T22:34:08\",171],[\"2022-07-18T22:34:13\",171],[\"2022-07-18T22:34:18\",189],[\"2022-07-18T22:34:23\",189],[\"2022-07-19T13:46:32\",5000],[\"2022-07-19T13:46:37\",5000],[\"2022-07-19T13:46:42\",5000],[\"2022-07-19T15:30:38\",534],[\"2022-07-19T15:30:43\",102],[\"2022-07-19T15:30:48\",131],[\"2022-07-19T15:30:54\",181],[\"2022-07-25T14:42:01\",464],[\"2022-07-25T14:42:06\",96],[\"2022-07-25T14:42:11\",106],[\"2022-07-25T14:42:16\",93],[\"2022-09-24T22:40:30\",5000],[\"2022-09-24T22:40:34\",3491],[\"2022-09-24T22:40:38\",1917],[\"2022-09-24T22:40:43\",2060],[\"2022-09-24T22:40:48\",2480],[\"2022-09-24T22:40:54\",2238],[\"2022-09-24T22:41:00\",3378],[\"2022-09-24T22:41:06\",2700],[\"2022-09-24T22:41:11\",1599],[\"2022-09-24T22:41:16\",1423],[\"2022-09-24T22:41:23\",2294],[\"2022-09-24T22:41:31\",3744],[\"2022-09-24T22:41:34\",2280],[\"2022-09-24T22:41:39\",1809],[\"2022-09-24T22:41:43\",1065],[\"2022-09-24T22:41:48\",1175],[\"2022-09-25T11:45:42\",376],[\"2022-09-25T11:45:46\",90],[\"2022-09-25T11:45:51\",88],[\"2022-09-25T11:45:56\",90],[\"2022-09-25T11:46:01\",86],[\"2022-09-27T12:32:35\",303],[\"2022-09-27T12:32:40\",93],[\"2022-09-27T12:32:45\",85],[\"2022-09-27T12:32:51\",130],[\"2022-09-27T12:32:57\",140],[\"2022-09-27T12:33:03\",152],[\"2022-09-27T12:33:09\",131],[\"2022-09-27T12:33:15\",130],[\"2022-09-27T12:33:21\",140],[\"2022-09-27T12:33:42\",86],[\"2022-09-27T12:34:22\",84],[\"2022-09-27T12:34:54\",88],[\"2022-09-27T12:35:21\",82],[\"2022-09-27T12:35:48\",85],[\"2022-09-27T12:36:11\",84],[\"2022-09-27T12:36:36\",99],[\"2022-09-27T12:36:44\",177],[\"2022-09-27T12:36:50\",285],[\"2023-01-19T16:22:16\",281],[\"2023-01-19T16:22:21\",79],[\"2023-01-19T16:22:26\",81],[\"2023-01-19T16:22:32\",111],[\"2023-01-19T16:22:38\",98],[\"2023-01-19T16:22:44\",126],[\"2023-01-19T16:22:50\",125],[\"2023-01-19T16:22:56\",94],[\"2023-01-19T16:23:08\",81],[\"2023-01-19T16:23:48\",79],[\"2023-01-19T16:24:24\",80],[\"2023-01-19T16:24:57\",80],[\"2023-01-19T16:25:26\",80],[\"2023-01-19T16:25:42\",276],[\"2023-01-19T16:25:47\",227],[\"2023-01-19T16:39:15\",287],[\"2023-01-19T16:39:20\",79],[\"2023-01-19T16:39:25\",79],[\"2023-01-19T16:39:30\",80],[\"2023-01-19T16:39:35\",108],[\"2023-01-19T16:39:40\",80],[\"2023-01-19T16:39:45\",81],[\"2023-01-19T16:39:50\",80],[\"2023-01-19T16:39:55\",81],[\"2023-01-19T16:40:00\",81],[\"2023-01-19T16:40:05\",81],[\"2023-01-19T16:40:10\",79],[\"2023-01-19T16:40:15\",78]],\"EU West\":[[\"2021-10-17T12:01:38\",4056],[\"2021-10-17T12:01:40\",1620],[\"2021-10-17T12:01:43\",83],[\"2021-10-17T12:01:48\",133],[\"2021-10-17T12:01:53\",132],[\"2021-10-17T12:01:58\",260],[\"2021-10-17T12:02:03\",209],[\"2021-10-17T12:02:08\",177],[\"2021-10-17T12:02:14\",228],[\"2021-10-17T12:02:19\",285],[\"2021-10-17T12:02:24\",289],[\"2021-10-17T12:02:30\",695],[\"2021-10-17T12:02:36\",104],[\"2021-10-17T12:02:42\",127],[\"2021-10-17T12:02:48\",411],[\"2021-10-17T12:02:54\",531],[\"2021-10-17T12:03:00\",306],[\"2021-10-17T12:03:08\",2226],[\"2021-10-17T12:03:25\",344],[\"2021-10-17T12:03:47\",136],[\"2021-10-17T12:04:10\",81],[\"2021-10-17T12:04:33\",261],[\"2021-10-17T12:04:59\",150],[\"2021-10-17T12:05:21\",135],[\"2021-10-17T12:05:43\",192],[\"2021-10-17T12:06:03\",189],[\"2021-10-17T12:06:21\",184],[\"2021-10-17T12:06:44\",424],[\"2021-10-17T12:07:10\",1298],[\"2021-10-17T12:07:35\",322],[\"2021-10-17T12:07:43\",466],[\"2021-10-17T12:07:52\",3865],[\"2021-10-17T12:07:53\",234],[\"2021-10-17T12:08:01\",2760],[\"2021-10-17T12:08:04\",731],[\"2021-10-17T12:08:11\",2916],[\"2021-10-17T12:08:13\",369],[\"2021-10-17T12:08:19\",416],[\"2021-10-17T12:08:25\",778],[\"2021-10-17T12:08:44\",1741],[\"2021-10-17T12:08:48\",421],[\"2021-11-26T11:53:34\",308],[\"2021-11-26T11:53:39\",81],[\"2021-11-26T11:53:44\",68],[\"2021-11-26T11:53:49\",64],[\"2021-11-26T11:53:54\",87],[\"2021-11-26T11:53:59\",63],[\"2021-11-26T11:54:04\",62],[\"2021-11-26T11:54:09\",246],[\"2021-11-26T11:54:14\",186],[\"2021-11-26T11:54:19\",332],[\"2021-11-27T21:40:03\",684],[\"2021-11-27T21:40:07\",111],[\"2021-11-27T21:40:12\",111],[\"2021-11-27T21:40:17\",113],[\"2021-11-30T20:58:54\",441],[\"2021-11-30T20:58:59\",61],[\"2021-11-30T20:59:04\",523],[\"2021-11-30T20:59:09\",63],[\"2021-11-30T20:59:15\",63],[\"2021-11-30T20:59:21\",65],[\"2021-11-30T20:59:28\",1260],[\"2021-11-30T20:59:33\",63],[\"2021-11-30T20:59:39\",67],[\"2021-11-30T20:59:45\",64],[\"2021-11-30T20:59:51\",162],[\"2021-11-30T20:59:57\",151],[\"2021-11-30T21:00:17\",62],[\"2021-11-30T21:00:35\",61],[\"2021-11-30T21:00:56\",62],[\"2021-11-30T21:01:17\",117],[\"2021-11-30T21:01:37\",62],[\"2021-11-30T21:02:01\",65],[\"2021-11-30T21:02:25\",63],[\"2021-11-30T21:02:50\",1150],[\"2021-11-30T21:03:14\",65],[\"2021-11-30T21:03:38\",62],[\"2021-11-30T21:04:04\",62],[\"2021-11-30T21:04:47\",302],[\"2021-11-30T21:05:47\",278],[\"2021-11-30T21:06:07\",135],[\"2021-11-30T21:06:12\",198],[\"2021-11-30T21:06:18\",1349],[\"2021-11-30T21:06:22\",337],[\"2021-11-30T21:06:27\",269],[\"2021-12-16T19:47:43\",974],[\"2021-12-16T19:47:47\",321],[\"2021-12-16T19:47:52\",153],[\"2021-12-16T19:47:57\",296],[\"2021-12-16T19:48:02\",294],[\"2021-12-16T19:48:07\",215],[\"2022-06-21T00:24:34\",661],[\"2022-06-21T00:24:39\",93],[\"2022-06-21T00:24:44\",124],[\"2022-06-26T17:19:11\",2364],[\"2022-06-26T17:19:14\",120],[\"2022-06-26T17:19:19\",567],[\"2022-06-26T17:19:24\",140],[\"2022-06-26T17:19:34\",5000],[\"2022-06-26T17:19:35\",720],[\"2022-07-03T16:00:21\",582],[\"2022-07-03T16:00:25\",126],[\"2022-07-18T22:33:28\",354],[\"2022-07-18T22:33:33\",229],[\"2022-07-18T22:33:38\",135],[\"2022-07-18T22:33:43\",199],[\"2022-07-18T22:33:48\",189],[\"2022-07-18T22:33:53\",108],[\"2022-07-18T22:33:58\",108],[\"2022-07-18T22:34:03\",97],[\"2022-07-18T22:34:08\",94],[\"2022-07-18T22:34:13\",96],[\"2022-07-18T22:34:18\",92],[\"2022-07-18T22:34:23\",83],[\"2022-07-19T13:46:32\",5000],[\"2022-07-19T13:46:37\",5000],[\"2022-07-19T13:46:42\",5000],[\"2022-07-19T15:30:39\",647],[\"2022-07-19T15:30:43\",67],[\"2022-07-19T15:30:48\",85],[\"2022-07-19T15:30:54\",193],[\"2022-07-25T14:42:02\",436],[\"2022-07-25T14:42:06\",92],[\"2022-07-25T14:42:12\",330],[\"2022-07-25T14:42:16\",93],[\"2022-09-24T22:40:31\",5000],[\"2022-09-24T22:40:35\",3389],[\"2022-09-24T22:40:38\",1976],[\"2022-09-24T22:40:43\",2047],[\"2022-09-24T22:40:49\",2628],[\"2022-09-24T22:40:53\",1610],[\"2022-09-24T22:41:01\",3726],[\"2022-09-24T22:41:06\",2913],[\"2022-09-24T22:41:11\",2238],[\"2022-09-24T22:41:18\",1089],[\"2022-09-24T22:41:24\",1364],[\"2022-09-24T22:41:31\",2548],[\"2022-09-24T22:41:35\",912],[\"2022-09-24T22:41:40\",1113],[\"2022-09-24T22:41:45\",1243],[\"2022-09-25T11:45:42\",544],[\"2022-09-25T11:45:47\",59],[\"2022-09-25T11:45:52\",56],[\"2022-09-25T11:45:57\",68],[\"2022-09-25T11:46:02\",56],[\"2022-09-27T12:32:36\",712],[\"2022-09-27T12:32:40\",64],[\"2022-09-27T12:32:45\",55],[\"2022-09-27T12:32:51\",55],[\"2022-09-27T12:32:57\",55],[\"2022-09-27T12:33:03\",70],[\"2022-09-27T12:33:09\",56],[\"2022-09-27T12:33:15\",54],[\"2022-09-27T12:33:21\",54],[\"2022-09-27T12:33:48\",57],[\"2022-09-27T12:34:26\",54],[\"2022-09-27T12:34:57\",54],[\"2022-09-27T12:35:23\",54],[\"2022-09-27T12:35:51\",215],[\"2022-09-27T12:36:15\",55],[\"2022-09-27T12:36:40\",72],[\"2022-09-27T12:36:45\",158],[\"2022-09-27T12:36:50\",81],[\"2023-01-19T16:22:17\",195],[\"2023-01-19T16:22:22\",48],[\"2023-01-19T16:22:27\",48],[\"2023-01-19T16:22:32\",144],[\"2023-01-19T16:22:38\",132],[\"2023-01-19T16:22:44\",140],[\"2023-01-19T16:22:50\",169],[\"2023-01-19T16:22:56\",117],[\"2023-01-19T16:23:13\",48],[\"2023-01-19T16:23:52\",50],[\"2023-01-19T16:24:29\",50],[\"2023-01-19T16:25:00\",49],[\"2023-01-19T16:25:29\",47],[\"2023-01-19T16:25:42\",186],[\"2023-01-19T16:25:47\",255],[\"2023-01-19T16:39:15\",187],[\"2023-01-19T16:39:20\",68],[\"2023-01-19T16:39:25\",49],[\"2023-01-19T16:39:30\",49],[\"2023-01-19T16:39:35\",98],[\"2023-01-19T16:39:40\",50],[\"2023-01-19T16:39:45\",48],[\"2023-01-19T16:39:50\",47],[\"2023-01-19T16:39:55\",48],[\"2023-01-19T16:40:00\",51],[\"2023-01-19T16:40:05\",49],[\"2023-01-19T16:40:10\",51],[\"2023-01-19T16:40:16\",50]],\"Asia North\":[[\"2021-10-17T12:01:37\",2772],[\"2021-10-17T12:01:40\",1112],[\"2021-10-17T12:01:44\",306],[\"2021-10-17T12:01:49\",530],[\"2021-10-17T12:01:54\",834],[\"2021-10-17T12:01:59\",540],[\"2021-10-17T12:02:04\",400],[\"2021-10-17T12:02:10\",1217],[\"2021-10-17T12:02:14\",317],[\"2021-10-17T12:02:19\",321],[\"2021-10-17T12:02:26\",1478],[\"2021-10-17T12:02:31\",618],[\"2021-10-17T12:02:37\",267],[\"2021-10-17T12:02:43\",406],[\"2021-10-17T12:02:49\",407],[\"2021-10-17T12:02:55\",400],[\"2021-10-17T12:03:01\",445],[\"2021-10-17T12:03:08\",1403],[\"2021-10-17T12:03:27\",270],[\"2021-10-17T12:03:50\",467],[\"2021-10-17T12:04:13\",409],[\"2021-10-17T12:04:37\",855],[\"2021-10-17T12:05:02\",486],[\"2021-10-17T12:05:23\",528],[\"2021-10-17T12:05:46\",256],[\"2021-10-17T12:06:05\",604],[\"2021-10-17T12:06:24\",561],[\"2021-10-17T12:06:46\",408],[\"2021-10-17T12:07:13\",1514],[\"2021-10-17T12:07:43\",621],[\"2021-10-17T12:07:52\",4264],[\"2021-10-17T12:07:53\",588],[\"2021-10-17T12:07:58\",484],[\"2021-10-17T12:08:04\",1241],[\"2021-10-17T12:08:11\",3571],[\"2021-10-17T12:08:13\",539],[\"2021-10-17T12:08:18\",521],[\"2021-10-17T12:08:23\",410],[\"2021-10-17T12:08:29\",374],[\"2021-10-17T12:08:45\",2144],[\"2021-10-17T12:08:48\",437],[\"2021-11-26T11:53:35\",870],[\"2021-11-26T11:53:39\",363],[\"2021-11-26T11:53:44\",269],[\"2021-11-26T11:53:49\",267],[\"2021-11-26T11:53:54\",273],[\"2021-11-26T11:53:59\",270],[\"2021-11-26T11:54:04\",266],[\"2021-11-26T11:54:10\",786],[\"2021-11-26T11:54:15\",432],[\"2021-11-27T21:40:04\",1068],[\"2021-11-27T21:40:08\",453],[\"2021-11-27T21:40:13\",312],[\"2021-11-27T21:40:18\",297],[\"2021-11-30T20:58:55\",894],[\"2021-11-30T20:58:59\",265],[\"2021-11-30T20:59:04\",265],[\"2021-11-30T20:59:09\",266],[\"2021-11-30T20:59:15\",269],[\"2021-11-30T20:59:21\",757],[\"2021-11-30T20:59:28\",1411],[\"2021-11-30T20:59:33\",264],[\"2021-11-30T20:59:39\",264],[\"2021-11-30T20:59:45\",268],[\"2021-11-30T20:59:51\",373],[\"2021-11-30T20:59:59\",311],[\"2021-11-30T21:00:18\",336],[\"2021-11-30T21:00:38\",378],[\"2021-11-30T21:00:59\",412],[\"2021-11-30T21:01:19\",264],[\"2021-11-30T21:01:39\",266],[\"2021-11-30T21:02:04\",265],[\"2021-11-30T21:02:29\",267],[\"2021-11-30T21:02:52\",265],[\"2021-11-30T21:03:17\",267],[\"2021-11-30T21:03:41\",265],[\"2021-11-30T21:04:07\",266],[\"2021-11-30T21:04:47\",527],[\"2021-11-30T21:05:47\",454],[\"2021-11-30T21:06:08\",1259],[\"2021-11-30T21:06:12\",285],[\"2021-11-30T21:06:19\",1452],[\"2021-11-30T21:06:22\",366],[\"2021-11-30T21:06:27\",334],[\"2021-12-16T19:47:44\",1413],[\"2021-12-16T19:47:48\",477],[\"2021-12-16T19:47:53\",455],[\"2021-12-16T19:47:58\",434],[\"2021-12-16T19:48:03\",472],[\"2021-12-16T19:48:08\",405],[\"2022-06-21T00:24:36\",1183],[\"2022-06-21T00:24:40\",335],[\"2022-06-21T00:24:45\",331],[\"2022-06-26T17:19:11\",2194],[\"2022-06-26T17:19:14\",311],[\"2022-06-26T17:19:19\",330],[\"2022-06-26T17:19:24\",410],[\"2022-06-26T17:19:34\",5000],[\"2022-06-26T17:19:35\",928],[\"2022-07-03T16:00:22\",1174],[\"2022-07-03T16:00:26\",360],[\"2022-07-18T22:33:29\",909],[\"2022-07-18T22:33:33\",270],[\"2022-07-18T22:33:38\",279],[\"2022-07-18T22:33:43\",273],[\"2022-07-18T22:33:48\",287],[\"2022-07-18T22:33:53\",321],[\"2022-07-18T22:33:58\",315],[\"2022-07-18T22:34:03\",330],[\"2022-07-18T22:34:09\",345],[\"2022-07-18T22:34:14\",328],[\"2022-07-18T22:34:19\",333],[\"2022-07-19T13:46:32\",5000],[\"2022-07-19T13:46:38\",5000],[\"2022-07-19T13:46:43\",5000],[\"2022-07-19T15:30:40\",1158],[\"2022-07-19T15:30:44\",300],[\"2022-07-19T15:30:49\",293],[\"2022-07-19T15:30:54\",321],[\"2022-07-25T14:42:03\",1158],[\"2022-07-25T14:42:07\",252],[\"2022-07-25T14:42:12\",251],[\"2022-09-24T22:40:31\",5000],[\"2022-09-24T22:40:36\",4273],[\"2022-09-24T22:40:38\",1881],[\"2022-09-24T22:40:42\",912],[\"2022-09-24T22:40:48\",1746],[\"2022-09-24T22:40:54\",2233],[\"2022-09-24T22:41:01\",4102],[\"2022-09-24T22:41:06\",3290],[\"2022-09-24T22:41:12\",2927],[\"2022-09-24T22:41:20\",1262],[\"2022-09-24T22:41:26\",2361],[\"2022-09-24T22:41:33\",2207],[\"2022-09-24T22:41:38\",2410],[\"2022-09-24T22:41:43\",2488],[\"2022-09-24T22:41:47\",1328],[\"2022-09-25T11:45:43\",843],[\"2022-09-25T11:45:47\",251],[\"2022-09-25T11:45:52\",254],[\"2022-09-25T11:45:57\",254],[\"2022-09-25T11:46:02\",252],[\"2022-09-27T12:32:36\",734],[\"2022-09-27T12:32:41\",225],[\"2022-09-27T12:32:46\",223],[\"2022-09-27T12:32:52\",224],[\"2022-09-27T12:32:58\",225],[\"2022-09-27T12:33:04\",225],[\"2022-09-27T12:33:10\",225],[\"2022-09-27T12:33:16\",223],[\"2022-09-27T12:33:22\",225],[\"2022-09-27T12:33:52\",224],[\"2022-09-27T12:34:29\",223],[\"2022-09-27T12:35:00\",224],[\"2022-09-27T12:35:25\",225],[\"2022-09-27T12:35:53\",378],[\"2022-09-27T12:36:17\",223],[\"2022-09-27T12:36:43\",245],[\"2022-09-27T12:36:48\",262],[\"2023-01-19T16:22:18\",768],[\"2023-01-19T16:22:22\",240],[\"2023-01-19T16:22:27\",239],[\"2023-01-19T16:22:33\",237],[\"2023-01-19T16:22:39\",249],[\"2023-01-19T16:22:45\",261],[\"2023-01-19T16:22:51\",239],[\"2023-01-19T16:22:57\",239],[\"2023-01-19T16:23:17\",246],[\"2023-01-19T16:23:58\",240],[\"2023-01-19T16:24:34\",239],[\"2023-01-19T16:25:03\",239],[\"2023-01-19T16:25:33\",237],[\"2023-01-19T16:25:42\",335],[\"2023-01-19T16:25:47\",284],[\"2023-01-19T16:39:16\",756],[\"2023-01-19T16:39:21\",234],[\"2023-01-19T16:39:26\",239],[\"2023-01-19T16:39:31\",234],[\"2023-01-19T16:39:36\",240],[\"2023-01-19T16:39:41\",237],[\"2023-01-19T16:39:46\",236],[\"2023-01-19T16:39:51\",237],[\"2023-01-19T16:39:56\",234],[\"2023-01-19T16:40:01\",236],[\"2023-01-19T16:40:06\",235],[\"2023-01-19T16:40:11\",238],[\"2023-01-19T16:40:16\",237]],\"Asia West\":[[\"2021-10-17T12:01:39\",5000],[\"2021-10-17T12:01:42\",3120],[\"2021-10-17T12:01:45\",504],[\"2021-10-17T12:01:50\",451],[\"2021-10-17T12:01:54\",341],[\"2021-10-17T12:01:59\",331],[\"2021-10-17T12:02:05\",373],[\"2021-10-17T12:02:10\",729],[\"2021-10-17T12:02:15\",436],[\"2021-10-17T12:02:20\",296],[\"2021-10-17T12:02:26\",1504],[\"2021-10-17T12:02:31\",637],[\"2021-10-17T12:02:37\",291],[\"2021-10-17T12:02:43\",419],[\"2021-10-17T12:02:49\",347],[\"2021-10-17T12:02:55\",418],[\"2021-10-17T12:03:01\",381],[\"2021-10-17T12:03:09\",1638],[\"2021-10-17T12:03:30\",521],[\"2021-10-17T12:03:52\",372],[\"2021-10-17T12:04:16\",613],[\"2021-10-17T12:04:40\",1818],[\"2021-10-17T12:05:06\",679],[\"2021-10-17T12:05:25\",480],[\"2021-10-17T12:05:47\",251],[\"2021-10-17T12:06:08\",300],[\"2021-10-17T12:06:27\",432],[\"2021-10-17T12:06:50\",681],[\"2021-10-17T12:07:16\",783],[\"2021-10-17T12:07:43\",808],[\"2021-10-17T12:07:52\",4086],[\"2021-10-17T12:07:52\",336],[\"2021-10-17T12:07:58\",423],[\"2021-10-17T12:08:04\",1377],[\"2021-10-17T12:08:11\",3456],[\"2021-10-17T12:08:13\",469],[\"2021-10-17T12:08:18\",577],[\"2021-10-17T12:08:23\",338],[\"2021-10-17T12:08:31\",975],[\"2021-10-17T12:08:45\",2225],[\"2021-10-17T12:08:48\",410],[\"2021-11-26T11:53:35\",837],[\"2021-11-26T11:53:40\",277],[\"2021-11-26T11:53:45\",257],[\"2021-11-26T11:53:50\",254],[\"2021-11-26T11:53:55\",253],[\"2021-11-26T11:54:00\",264],[\"2021-11-26T11:54:05\",256],[\"2021-11-26T11:54:10\",469],[\"2021-11-26T11:54:15\",403],[\"2021-11-27T21:40:04\",1155],[\"2021-11-27T21:40:08\",282],[\"2021-11-27T21:40:13\",279],[\"2021-11-30T20:58:55\",844],[\"2021-11-30T20:59:00\",257],[\"2021-11-30T20:59:06\",1580],[\"2021-11-30T20:59:10\",255],[\"2021-11-30T20:59:16\",255],[\"2021-11-30T20:59:22\",253],[\"2021-11-30T20:59:28\",483],[\"2021-11-30T20:59:34\",252],[\"2021-11-30T20:59:40\",261],[\"2021-11-30T20:59:46\",567],[\"2021-11-30T20:59:52\",316],[\"2021-11-30T21:00:01\",301],[\"2021-11-30T21:00:20\",310],[\"2021-11-30T21:00:40\",253],[\"2021-11-30T21:01:00\",261],[\"2021-11-30T21:01:21\",378],[\"2021-11-30T21:01:41\",252],[\"2021-11-30T21:02:07\",256],[\"2021-11-30T21:02:31\",254],[\"2021-11-30T21:02:55\",254],[\"2021-11-30T21:03:20\",254],[\"2021-11-30T21:03:44\",459],[\"2021-11-30T21:04:10\",757],[\"2021-11-30T21:04:47\",475],[\"2021-11-30T21:05:47\",491],[\"2021-11-30T21:06:08\",1282],[\"2021-11-30T21:06:12\",297],[\"2021-11-30T21:06:19\",1476],[\"2021-11-30T21:06:23\",339],[\"2021-11-30T21:06:28\",255],[\"2021-12-16T19:47:44\",1492],[\"2021-12-16T19:47:48\",477],[\"2021-12-16T19:47:53\",489],[\"2021-12-16T19:47:58\",504],[\"2021-12-16T19:48:03\",471],[\"2021-12-16T19:48:08\",424],[\"2022-06-21T00:24:36\",1210],[\"2022-06-21T00:24:40\",354],[\"2022-06-21T00:24:45\",361],[\"2022-06-26T17:19:12\",2177],[\"2022-06-26T17:19:15\",310],[\"2022-06-26T17:19:20\",322],[\"2022-06-26T17:19:25\",352],[\"2022-06-26T17:19:35\",5000],[\"2022-06-26T17:19:35\",384],[\"2022-07-03T16:00:22\",1133],[\"2022-07-03T16:00:26\",355],[\"2022-07-18T22:33:29\",882],[\"2022-07-18T22:33:33\",268],[\"2022-07-18T22:33:38\",265],[\"2022-07-18T22:33:43\",261],[\"2022-07-18T22:33:48\",276],[\"2022-07-18T22:33:54\",315],[\"2022-07-18T22:33:59\",300],[\"2022-07-18T22:34:04\",324],[\"2022-07-18T22:34:09\",332],[\"2022-07-18T22:34:14\",325],[\"2022-07-18T22:34:19\",330],[\"2022-07-19T13:46:33\",5000],[\"2022-07-19T13:46:38\",5000],[\"2022-07-19T13:46:43\",5000],[\"2022-07-19T15:30:40\",1134],[\"2022-07-19T15:30:44\",328],[\"2022-07-19T15:30:49\",277],[\"2022-07-19T15:30:54\",294],[\"2022-07-25T14:42:03\",992],[\"2022-07-25T14:42:07\",294],[\"2022-07-25T14:42:12\",294],[\"2022-09-24T22:40:32\",5000],[\"2022-09-24T22:40:36\",4216],[\"2022-09-24T22:40:39\",1916],[\"2022-09-24T22:40:43\",1525],[\"2022-09-24T22:40:49\",1809],[\"2022-09-24T22:40:54\",2143],[\"2022-09-24T22:41:03\",4598],[\"2022-09-24T22:41:08\",3952],[\"2022-09-24T22:41:12\",2302],[\"2022-09-24T22:41:20\",1330],[\"2022-09-24T22:41:26\",2388],[\"2022-09-24T22:41:34\",3079],[\"2022-09-24T22:41:38\",2420],[\"2022-09-24T22:41:45\",5000],[\"2022-09-25T11:45:43\",821],[\"2022-09-25T11:45:48\",281],[\"2022-09-25T11:45:53\",251],[\"2022-09-25T11:45:58\",253],[\"2022-09-25T11:46:03\",249],[\"2022-09-27T12:32:37\",754],[\"2022-09-27T12:32:41\",234],[\"2022-09-27T12:32:46\",232],[\"2022-09-27T12:32:52\",249],[\"2022-09-27T12:32:58\",247],[\"2022-09-27T12:33:04\",249],[\"2022-09-27T12:33:10\",257],[\"2022-09-27T12:33:16\",247],[\"2022-09-27T12:33:22\",243],[\"2022-09-27T12:33:55\",244],[\"2022-09-27T12:34:32\",230],[\"2022-09-27T12:35:04\",267],[\"2022-09-27T12:35:29\",231],[\"2022-09-27T12:35:56\",499],[\"2022-09-27T12:36:20\",338],[\"2022-09-27T12:36:44\",391],[\"2022-09-27T12:36:49\",361],[\"2023-01-19T16:22:18\",838],[\"2023-01-19T16:22:23\",265],[\"2023-01-19T16:22:28\",268],[\"2023-01-19T16:22:33\",267],[\"2023-01-19T16:22:39\",288],[\"2023-01-19T16:22:45\",285],[\"2023-01-19T16:22:51\",270],[\"2023-01-19T16:22:57\",265],[\"2023-01-19T16:23:23\",265],[\"2023-01-19T16:24:01\",264],[\"2023-01-19T16:24:37\",265],[\"2023-01-19T16:25:05\",264],[\"2023-01-19T16:25:37\",263],[\"2023-01-19T16:25:43\",370],[\"2023-01-19T16:25:48\",300],[\"2023-01-19T16:39:17\",806],[\"2023-01-19T16:39:21\",261],[\"2023-01-19T16:39:26\",259],[\"2023-01-19T16:39:31\",269],[\"2023-01-19T16:39:36\",261],[\"2023-01-19T16:39:41\",259],[\"2023-01-19T16:39:46\",263],[\"2023-01-19T16:39:51\",268],[\"2023-01-19T16:39:56\",265],[\"2023-01-19T16:40:01\",263],[\"2023-01-19T16:40:07\",264],[\"2023-01-19T16:40:12\",270],[\"2023-01-19T16:40:17\",263]]}}}"
		"""
		servers_dict = {"EU-WEST": "dynamodb.eu-west-3.amazonaws.com", "EU-CENTRAL": "dynamodb.eu-central-1.amazonaws.com", "EU-NORTH": "dynamodb.eu-north-1.amazonaws.com", "NA-WEST": "dynamodb.us-west-1.amazonaws.com", "NA-NORTH-WEST": "dynamodb.us-west-2.amazonaws.com", "NA-CENTRAL": "dynamodb.us-east-2.amazonaws.com", "NA-NORTH-WEST": "dynamodb.us-west-2.amazonaws.com", "ASIA-NORTH": "dynamodb.ap-northeast-2.amazonaws.com", "ASIA-WEST": "dynamodb.ap-northeast-1.amazonaws.com"}
		ping_result = ping(target=servers_dict[region], count=10, timeout=2)
		return ({'host': servers_dict[region],'avg_latency': ping_result.rtt_avg_ms,'min_latency': ping_result.rtt_min_ms,'max_latency': ping_result.rtt_max_ms,'packet_loss': ping_result.packet_loss})

	"""

	CONTENT

	"""
	def get_content(self):
		#TODO: I should get the client version and client platform from the shooterLog
		header = self.base_pvp_header.copy()
		header["X-Riot-ClientPlatform"]  = self.client_platform
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request("content-service/v3/content", prefix="shared", header=header).get_json()
	
	"""

	SESSION

	"""
	def get_session(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"session/v1/sessions/{puuid}", prefix=f"glz-{self.region}-1", header=header).get_json()


	"""
	PLAYER ACCOUNT

	"""
	def get_player_restrictions(self):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"restrictions/v3/penalties", header=header).get_json()

	def get_current_player(self):
		return Request("https://auth.riotgames.com/userinfo", self.base_pvp_header).get_json()

	def get_current_player_puuid(self):
		return self.get_current_player()["sub"]

	def get_accountXP(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"account-xp/v1/players/{puuid}", header=header).get_json()

	def get_player_loadout(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"personalization/v2/players/{puuid}/playerloadout", header=header).get_json()
	
	def update_player_loadout(self, puuid, new_loadout):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"personalization/v2/players/{puuid}/playerloadout", header=header).put(new_loadout)

	def get_player_mmr(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-ClientPlatform"]  = self.client_platform
		header["X-Riot-ClientVersion"] = self.client_version
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"mmr/v1/players/{puuid}", header=header).get_json()

	"""
	
	PARTY

	"""
	
	def get_current_party(self):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request(f"parties/v1/players/{self.get_current_player_puuid()}", prefix=f"glz-{self.region}-1", header=header).get_json()

	def get_current_party_id(self):
		return self.get_current_party()["CurrentPartyID"]

	def kick_player_from_party(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/players/{self.get_current_player_puuid()}", prefix=f"glz-{self.region}-1", header=header).delete()

	def set_player_ready(self, state=False):
		partyID = self.get_current_party_id()
		puuid= self.get_current_player_puuid()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/members/{puuid}/setReady", prefix=f"glz-{self.region}-1", header=header).post({"ready": state})	
	
	def set_party_accessibility(self, accessibility=True):
		partyID = self.get_current_party_id()
		accessibility_dict = {True: "OPEN", False: "CLOSED"}
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/accessibility", prefix=f"glz-{self.region}-1", header=header).post({"accessibility": accessibility_dict[accessibility]})

	def party_refresh_competitive_tier(self):
		partyID = self.get_current_party_id()
		puuid = self.get_current_player_puuid()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/members/{puuid}/refreshCompetitiveTier", prefix=f"glz-{self.region}-1", header=header).post()
	
	def refresh_party_ping(self):
		partyID = self.get_current_party_id()
		puuid = self.get_current_player_puuid()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/members/{puuid}/refreshPings", prefix=f"glz-{self.region}-1", header=header).post()
	
	def refresh_player_id(self):
		partyID = self.get_current_party_id()
		puuid = self.get_current_player_puuid()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/members/{puuid}/refreshPlayerIdentity", prefix=f"glz-{self.region}-1", header=header).post()
	
	def change_queue(self, index):
		partyID = self.get_current_party_id()
		available_queues = self.get_party_from_id(partyID)["EligibleQueues"]
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/queue", prefix=f"glz-{self.region}-1", header=header).post({"queueID": available_queues[index-1]})

	def join_queue(self):
		partyID = self.get_current_party_id()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/matchmaking/join", prefix=f"glz-{self.region}-1", header=header).post()

	def leave_queue(self):
		partyID = self.get_current_party_id()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/matchmaking/leave", prefix=f"glz-{self.region}-1", header=header).post()

	def party_invite(self, displayName):
		displayName = displayName.split("#")
		gameName = displayName[0]
		tagLine = displayName[1]
		partyID = self.get_current_party_id()
		header =  self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		header["X-Riot-ClientVersion"] = self.client_version
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/invites/name/{gameName}/tag/{tagLine}", prefix=f"glz-{self.region}-1", header=header).post()

	def party_request_join(self, partyID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/request", prefix=f"glz-{self.region}-1", header=header).post()

	def decline_party_request(self, partyID, requestID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"parties/v1/parties/{partyID}/request/{requestID}/decline", prefix=f"glz-{self.region}-1", header=header).post()

	"""
	
		PRE-GAME

	"""
	def get_current_pregame(self, puuid):
		#pregame/v1/players/{% puuid  %}
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"pregame/v1/players/{puuid}", prefix=f"glz-{self.region}-1", header=header).get_json()

	def get_current_pregame_id(self):
		return self.get_current_pregame(self.get_current_player_puuid())["MatchID"]

	def select_pregame_agent(self, agentID):
		matchID = self.get_current_pregame_id()
		#add6443a-41bd-e414-f6ad-e58d267f4e95 jett
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"pregame/v1/matches/{matchID}/select/{agentID}", prefix=f"glz-{self.region}-1", header=header).post()
	
	def lock_pregame_agent(self, agentID):
		#DO NOT USE THIS TO CREATE AN INSTALOCK BOT. please. have some self respect.
		matchID = self.get_current_pregame_id()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"pregame/v1/matches/{matchID}/lock/{agentID}", prefix=f"glz-{self.region}-1", header=header).post()

	def dodge_pregame_match(self):
		matchID = self.get_current_pregame_id()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"pregame/v1/matches/{matchID}/quit", prefix=f"glz-{self.region}-1", header=header).post()

	"""

	MATCHES

	"""

	def get_match_history(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"match-history/v1/history/{puuid}", header=header).get_json()

	def get_match_details(self, matchID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"match-details/v1/matches/{matchID}", header=header).get_json()
	
	"""
		CURRENT GAME

	"""

	def get_current_match_id(self):
		puuid = self.get_current_player_puuid()
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"core-game/v1/players/{puuid}", prefix=f"glz-{self.region}-1", header=header).get_json()["MatchID"]

	def get_current_match_info(self, matchID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"core-game/v1/matches/{matchID}", prefix=f"glz-{self.region}-1", header=header)
	
	def get_current_match_loadout(self, matchID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"core-game/v1/matches/{matchID}/loadouts", prefix=f"glz-{self.region}-1", header=header)

	def leave_current_match(self):
		puuid = self.get_current_player_puuid()
		matchID = self.get_current_match_id(puuid)
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		print(puuid, matchID, sep="########")
		return self.handle_pvp_request(f"core-game/v1/players/{puuid}/disassociate/{matchID}", prefix=f"glz-{self.region}-1", header=header).post()

	"""
	
	FRIENDS

	"""

	def get_friends(self):
		return self.handle_local_request("chat/v4/friends").get_json()
	
	def get_friend_requests(self):
		return self.handle_local_request("chat/v4/friend_requests").get_json()

	def add_friend(self, gameName, tagLine):
		return self.handle_local_request("chat/v4/friends").post({'game_name': gameName, 'game_tag': tagLine})

	def remove_friend(self, puuid):
		return  self.handle_local_request("chat/v4/friends").delete({"puuid": puuid})
	
	"""
	
	CHAT
	
	"""

	def get_messages(self):
		return self.handle_local_request("chat/v5/messages")

	def send_message(self, message, cid):
		return  self.handle_local_request("chat/v5/messages").post({"message": message, "cid": cid})
	
	def get_auth_info(self):
		response = self.handle_local_request("entitlements/v1/token").get_json()
		return [response["accessToken"], response["token"]]

	def get_player_settings(self):
		return self.handle_local_request("player-preferences/v1/data-json/Ares.PlayerSettings").get_json()
	
	"""

	STORE/TRANSACTIONS

	"""
	def get_storefront(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"store/v2/storefront/{puuid}", header=header).get_json()

	def get_store_offers(self):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request("store/v1/offers/", header=header).get_json()

	def get_wallet(self, puuid):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"store/v1/wallet/{puuid}", header=header).get_json()

	def get_order(self, orderID):
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"store/v1/order/{orderID}", header=header)
	
	def get_store_entitlements(self, puuid, itemType):
		item_type_dict = {
		"agents": "01bb38e1-da47-4e6a-9b3d-945fe4655707", 
		"contracts": "f85cb6f7-33e5-4dc8-b609-ec7212301948",
		"sprays": "d5f120f8-ff8c-4aac-92ea-f2b5acbe9475", 
		"gun_buddies": "dd3bf334-87f3-40bd-b043-682a57a8dc3a", 
		"cards": "3f296c07-64c3-494c-923b-fe692a4fa1bd", 
		"skins": "e7c63390-eda7-46e0-bb7a-a6abdacd2433",	
		"skin_variants": "3ad1b2b2-acdb-4524-852f-954a76ddae0a",
		"titles": "de7caa6b-adf7-4588-bbd1-143831e786c6"
		}
		
		header = self.base_pvp_header.copy()
		header["X-Riot-Entitlements-JWT"] = self.get_auth_info()[1]
		return self.handle_pvp_request(f"store/v1/entitlements/{puuid}/{item_type_dict[itemType]}", header=header).get_json()
